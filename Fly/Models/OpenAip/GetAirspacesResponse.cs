// This file has been generated by https://app.quicktype.io/ .
// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using Fly.Models.OpenAip;
//
//    var getAirspacesResponse = GetAirspacesResponse.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace Fly.Models.OpenAip
{
    using System;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class RawGetAirspacesResponse
    {
        [JsonPropertyName("limit")]
        public long Limit { get; set; }

        [JsonPropertyName("totalCount")]
        public long TotalCount { get; set; }

        [JsonPropertyName("totalPages")]
        public long TotalPages { get; set; }

        [JsonPropertyName("page")]
        public long Page { get; set; }

        [JsonPropertyName("items")]
        public Item[] Items { get; set; }
    }

    public partial class Item
    {
        [JsonPropertyName("_id")]
        public string Id { get; set; }

        [JsonPropertyName("createdBy")]
        public string CreatedBy { get; set; }

        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonPropertyName("updatedBy")]
        public string UpdatedBy { get; set; }

        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("dataIngestion")]
        public bool DataIngestion { get; set; }

        [JsonPropertyName("type")]
        public long Type { get; set; }

        [JsonPropertyName("icaoClass")]
        public long IcaoClass { get; set; }

        [JsonPropertyName("activity")]
        public long Activity { get; set; }

        [JsonPropertyName("onDemand")]
        public bool OnDemand { get; set; }

        [JsonPropertyName("onRequest")]
        public bool OnRequest { get; set; }

        [JsonPropertyName("byNotam")]
        public bool ByNotam { get; set; }

        [JsonPropertyName("specialAgreement")]
        public bool SpecialAgreement { get; set; }

        [JsonPropertyName("requestCompliance")]
        public bool RequestCompliance { get; set; }

        [JsonPropertyName("geometry")]
        public Geometry Geometry { get; set; }

        [JsonPropertyName("country")]
        public string Country { get; set; }

        [JsonPropertyName("upperLimit")]
        public ErLimit UpperLimit { get; set; }

        [JsonPropertyName("lowerLimit")]
        public ErLimit LowerLimit { get; set; }

        [JsonPropertyName("hoursOfOperation")]
        public HoursOfOperation HoursOfOperation { get; set; }

        [JsonPropertyName("__v")]
        public long V { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("frequencies")]
        public Frequency[] Frequencies { get; set; }
    }

    public partial class Frequency
    {
        [JsonPropertyName("value")]
        public string Value { get; set; }

        [JsonPropertyName("primary")]
        public bool Primary { get; set; }

        [JsonPropertyName("unit")]
        public long Unit { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("remarks")]
        public string Remarks { get; set; }

        [JsonPropertyName("_id")]
        public string Id { get; set; }
    }

    public partial class Geometry
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("coordinates")]
        public double[][][] Coordinates { get; set; }
    }

    public partial class HoursOfOperation
    {
        [JsonPropertyName("operatingHours")]
        public OperatingHour[] OperatingHours { get; set; }
    }

    public partial class OperatingHour
    {
        [JsonPropertyName("dayOfWeek")]
        public long DayOfWeek { get; set; }

        [JsonPropertyName("startTime")]
        public Time StartTime { get; set; }

        [JsonPropertyName("endTime")]
        public Time EndTime { get; set; }

        [JsonPropertyName("byNotam")]
        public bool ByNotam { get; set; }

        [JsonPropertyName("sunrise")]
        public bool Sunrise { get; set; }

        [JsonPropertyName("sunset")]
        public bool Sunset { get; set; }

        [JsonPropertyName("publicHolidaysExcluded")]
        public bool PublicHolidaysExcluded { get; set; }
    }

    public partial class ErLimit
    {
        [JsonPropertyName("value")]
        public long Value { get; set; }

        [JsonPropertyName("unit")]
        public long Unit { get; set; }

        [JsonPropertyName("referenceDatum")]
        public long ReferenceDatum { get; set; }
    }

    public enum Time { The0000 };

    public partial class RawGetAirspacesResponse
    {
        public static RawGetAirspacesResponse FromJson(string json) => JsonSerializer.Deserialize<RawGetAirspacesResponse>(json, Fly.Models.OpenAip.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RawGetAirspacesResponse self) => JsonSerializer.Serialize(self, Fly.Models.OpenAip.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                TimeConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class TimeConverter : JsonConverter<Time>
    {
        public override bool CanConvert(Type t) => t == typeof(Time);

        public override Time Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "00:00")
            {
                return Time.The0000;
            }
            throw new Exception("Cannot unmarshal type Time");
        }

        public override void Write(Utf8JsonWriter writer, Time value, JsonSerializerOptions options)
        {
            if (value == Time.The0000)
            {
                JsonSerializer.Serialize(writer, "00:00", options);
                return;
            }
            throw new Exception("Cannot marshal type Time");
        }

        public static readonly TimeConverter Singleton = new TimeConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                    || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
